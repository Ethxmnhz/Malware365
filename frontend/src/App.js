// src/App.js
import React, { useState } from 'react';
import './App.css';
import './styles.css';


function App() {
  const [file, setFile] = useState(null);
  const [scanResult, setScanResult] = useState(null);
  const [websiteUrl, setWebsiteUrl] = useState('');
  const [websiteSafetyResult, setWebsiteSafetyResult] = useState(null);

  const handleFileChange = (e) => {
    setFile(e.target.files[0]);
  };

  const handleUpload = async () => {
    if (!file) {
      alert('Please select a file');
      return;
    }

    const formData = new FormData();
    formData.append('file', file);

    try {
      const response = await fetch('http://127.0.0.1:5000/upload', {
        method: 'POST',
        body: formData,
      });

      const data = await response.json();
      setScanResult(data);
    } catch (error) {
      console.error('Error uploading file:', error);
    }
  };
  const handleWebsiteCheck = async () => {
    try {
      const safetyResult = await checkWebsiteSafety(websiteUrl);
      setWebsiteSafetyResult(safetyResult);
    } catch (error) {
      console.error('Error checking website safety:', error);
      // Handle the error appropriately (e.g., show an error message to the user)
    }
  };

  const checkWebsiteSafety = async (url) => {
    try {
      // In a real-world scenario, you would need to integrate with external services for these checks.
      // For illustration purposes, let's assume a basic check for a valid URL format.
      const isValidUrl = isValidUrlFormat(url);

      return {
        isValidUrl,
        // Add more checks as needed
      };
    } catch (error) {
      throw new Error('Error checking website safety:', error);
    }
  };

  const isValidUrlFormat = (url) => {
    // For simplicity, we're using a basic regex check for a valid URL format.
    const urlRegex = /^(http|https):\/\/[^ "]+$/;
    return urlRegex.test(url);
  };




  return (
    
    <div className="App">
      <header>
        <h1>Malware365</h1>
      </header>

      <main>
        <input type="file" onChange={handleFileChange} />
        <button onClick={handleUpload}>Scan</button>
        

          {/* New section for website safety check */}
          <label>
          Enter Website URL:
          <input type="text" value={websiteUrl} onChange={(e) => setWebsiteUrl(e.target.value)} />
        </label>
        <button onClick={handleWebsiteCheck}>Check Safety</button>

        {/* Display scan result if available */}
        {scanResult && (
          <div className="result-box">
            <h2>Scan Result</h2>
            <ul>
              <li><strong>MD5:</strong> {scanResult.md5}</li>
              <li><strong>Permalink:</strong> <a href={scanResult.permalink} target="_blank" rel="noopener noreferrer">{scanResult.permalink}</a></li>
              <li><strong>Resource:</strong> {scanResult.resource}</li>
              <li><strong>Response Code:</strong> {scanResult.response_code}</li>
              <li><strong>Scan ID:</strong> {scanResult.scan_id}</li>
              <li><strong>SHA-1:</strong> {scanResult.sha1}</li>
              <li><strong>SHA-256:</strong> {scanResult.sha256}</li>
              <li><strong>Verbose Message:</strong> {scanResult.verbose_msg}</li>
              <li><strong>Debug Info:</strong> {JSON.stringify(scanResult, null, 2)}</li>
              <li><strong>Malicious:</strong> {scanResult.positives > 0 ? 'Yes' : 'No'}</li>
            </ul>
          </div>
        )}

        {/* Display website safety result if available */}
        {websiteSafetyResult && (
          <div className="result-box">
            <h2>Website Safety Result</h2>
            <ul>
              <li><strong>Is Valid URL:</strong> {websiteSafetyResult.isValidUrl ? 'Yes' : 'No'}</li>
              {/* Add more safety check results here */}
            </ul>
          </div>
        )}
      </main>

      <footer>
        <p>&copy; 2023 Malware365 by Minhaz</p>
      </footer>
    </div>
  );
}

export default App;